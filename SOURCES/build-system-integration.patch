diff --git a/mk/Makefile b/mk/Makefile
new file mode 100644
index 0000000..5215e07
--- /dev/null
+++ b/mk/Makefile
@@ -0,0 +1,58 @@
+REPONAME := kexec-tools
+USE_BRANDING := yes
+IMPORT_BRANDING := yes
+include $(B_BASE)/common.mk
+include $(B_BASE)/rpmbuild.mk
+
+-include $(MY_OBJ_DIR)/version.inc
+$(MY_OBJ_DIR)/version.inc: $(REPOSTAMP)
+	rm -f $(MY_OBJ_DIR)/version.inc
+	$(call git_cset_number,$(REPONAME)) >> $@
+
+KEXEC_TOOLS_VERSION := 2.0.4
+KEXEC_TOOLS_REVISION := $(shell expr $(CSET_NUMBER))
+
+KEXEC_SRPM := kexec-tools-$(KEXEC_TOOLS_VERSION)-$(KEXEC_TOOLS_REVISION).src.rpm
+SRPM := $(RPM_SRPMSDIR)/$(KEXEC_SRPM)
+
+SOURCES := $(RPM_SOURCESDIR)/kexec-tools-$(KEXEC_TOOLS_VERSION).tar.bz2
+SOURCES += $(RPM_SPECSDIR)/kexec-tools.spec
+SOURCES += $(RPM_SOURCESDIR)/xs-kdump
+SOURCES += $(RPM_SOURCESDIR)/kdump.sysconfig
+SOURCES += $(RPM_SOURCESDIR)/kdump
+SOURCES += $(RPM_SOURCESDIR)/kdump.service
+
+.PHONY: build
+build: $(MY_OBJ_DIR)/.rpmbuild.kexec.stamp $(MY_SOURCES)/MANIFEST
+        @ :
+
+.PHONY: clean
+clean:
+	rm -f $(MY_OBJ_DIR)/.rpmbuild.kexec.stamp
+	rm -f $(SOURCES)
+	rm -f $(MY_SOURCES)/MANIFEST
+
+$(RPM_SOURCESDIR)/%: $(RPM_SOURCESDIR)/.dirstamp %
+	cp -v $* $(RPM_SOURCESDIR)/$*
+
+$(RPM_SOURCESDIR)/kexec-tools-$(KEXEC_TOOLS_VERSION).tar.bz2: $(RPM_SOURCESDIR)/.dirstamp
+	{ set -e; set -o pipefail; \
+	cd $(call git_loc,$(REPONAME)); \
+	git archive --format=tar --prefix=$(REPONAME)-$(KEXEC_TOOLS_VERSION)/ HEAD | bzip2 > $@.tmp; \
+	mv -f $@.tmp $@; \
+	}
+
+$(RPM_SPECSDIR)/kexec-tools.spec: kexec-tools.spec.in $(RPM_SPECSDIR)/.dirstamp
+	{ set -e; set -o pipefail; \
+	sed -e 's/@KEXEC_TOOLS_VERSION@/$(KEXEC_TOOLS_VERSION)/g' \
+	    -e 's/@KEXEC_TOOLS_REVISION@/$(KEXEC_TOOLS_REVISION)/g' \
+		< $< > $@.tmp; \
+	mv -f $@.tmp $@; \
+	}
+
+$(MY_OBJ_DIR)/.rpmbuild.kexec.stamp: $(SOURCES) $(RPM_DIRECTORIES)
+	$(RPMBUILD) -ba $(RPM_SPECSDIR)/kexec-tools.spec
+	touch $@
+
+$(MY_SOURCES)/MANIFEST: $(MY_SOURCES)/.dirstamp
+	echo "$(COMPONENT) $(call rpm_license,$(SRPM)) file $(SRPM)" >$@
diff --git a/mk/kdump b/mk/kdump
new file mode 100644
index 0000000..cfe725d
--- /dev/null
+++ b/mk/kdump
@@ -0,0 +1,162 @@
+#! /bin/bash
+
+PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
+export PATH
+
+# Try to load settings from sysconfig
+if [[ -e /etc/sysconfig/kdump ]];
+then
+    . /etc/sysconfig/kdump
+fi
+
+TIME=$(which time) # Need /usr/bin/time rather than bash builtin
+
+# Defaults, overridden by /etc/sysconfig/kdump
+KEXEC=${KEXEC:-"/usr/sbin/kexec"}
+XCA=${XCA:-"/usr/lib64/xen/bin/xen-crashdump-analyser"}
+XCA_CMDLINE_EXTRA=${XCA_CMDLINE_EXTRA:-"-v"}
+CRASH_LOG_DIR=${CRASH_LOG_DIR:-"/var/crash"}
+CRASH_LOGIN=${CRASH_LOGIN:-"no"}
+CRASH_REBOOT=${CRASH_REBOOT:-"yes"}
+CRASH_MAX_LOGS=${CRASH_MAX_LOGS:-"4"}
+CRASH_SPACE=${CRASH_SPACE:-"$CRASH_LOG_DIR/.sacrificial-space-for-logs"}
+CRASH_SPACE_SIZE_MB=${CRASH_SPACE_SIZE_MB:-64}
+
+crash_dump()
+{
+    CRASH_XENVERSION=""
+    CRASH_LINUXVERSION=""
+
+    echo "Remount root fs rw"
+    mount -o remount,rw /
+
+    # Pull CRASH_{XEN,LINUX}VERSION from the kernel command line
+    set -- $(cat /proc/cmdline)
+    while [[ -n "$1" ]]; do
+        case "$1" in
+            kdump-xenversion=*)
+                CRASH_XENVERSION="$(echo "$1" | sed -e 's/kdump-xenversion=//')"
+                ;;
+            kdump-linuxversion=*)
+                CRASH_LINUXVERSION="$(echo "$1" | sed -e 's/kdump-linuxversion=//')"
+                ;;
+        esac
+        shift
+    done
+
+    # Clean up /var/lock/subsys.  We have crashed, so none of the rc3 programs
+    # are actually running.  This will prevent rc6 from trying to shut them down.
+    rm -f /var/lock/subsys/*
+
+    # Do we need to consider removing some logs?
+    if [[ -d "$CRASH_LOG_DIR" && "$CRASH_MAX_LOGS" -gt 0 ]] ; then
+        FIND_CMD="find $CRASH_LOG_DIR/ -regextype emacs -maxdepth 1 -type d -regex $CRASH_LOG_DIR/[0-9]+.*"
+
+        # Current number of log directories
+        CUR_DUMPS=$($FIND_CMD | wc -l)
+
+        # Number of log directories to be removed, leaving room for the soon-to-be-generated log
+        DEL_NUM=$((1+$CUR_DUMPS-$CRASH_MAX_LOGS))
+
+        if [[ "$DEL_NUM" -gt 0 ]]; then
+            echo "Removing older log directories: OK"
+            # Find, sort (oldest first), top N of them, delete
+            $FIND_CMD | sort -n | head -n $DEL_NUM | xargs rm -rf
+        fi
+    fi
+
+    # Delete the sacrificial space.  Experimentally, a crash which fills
+    # the filesystem causes many mistruths to be given by stat &
+    # friends.  To make things easy, unconditionally delete the file
+    # here to be sure we have at least $CRASH_SPACE_SIZE free.
+    rm "$CRASH_SPACE"
+
+    dir=$CRASH_LOG_DIR/$(date  +%Y%m%d-%H%M%S-%Z)
+
+    # Try to set the core pattern sensibly
+    if [[ -f /proc/sys/kernel/core_pattern ]] ; then
+        OLD_CORE_PATTERN=$(cat /proc/sys/kernel/core_pattern)
+        echo "$dir/core.%e.%p" > /proc/sys/kernel/core_pattern
+        ulimit -c 16384 # 16M
+    fi
+
+    # Collect some initial information
+    echo -n $"Collecting initial information: "
+    mkdir -p "$dir"
+    readelf -Wl /proc/vmcore &> "$dir/readelf-Wl.out"
+    readelf -Wn /proc/vmcore &> "$dir/readelf-Wn.out"
+    sync
+    echo OK
+    echo s > /proc/sysrq-trigger
+
+    XEN_SYMTAB="/boot/xen-$CRASH_XENVERSION.map"
+    DOM0_SYMTAB="/boot/System.map-$CRASH_LINUXVERSION"
+
+    # Run xen-crashdump-analyser
+    if [[ -e $XCA ]] ; then
+        echo -n $"Running xen-crashdump-analyser: "
+
+        XCA_CMD="$XCA --outdir $dir --xen-symtab $XEN_SYMTAB \
+                --dom0-symtab $DOM0_SYMTAB $XCA_CMDLINE_EXTRA"
+
+        # Do we have gnu time utility
+        if [[ -n "$TIME" ]] ; then
+            $TIME -v -o "$dir/time-v.out" $XCA_CMD && echo OK || echo FAILURE
+        else
+            $XCA_CMD && echo OK || echo FAILURE
+        fi
+        sync
+        echo s > /proc/sysrq-trigger
+
+    else
+        echo "Xen Crashdump Analyser not found: FAILED"
+    fi
+
+    # Collect some subsequent information
+    echo -n "Collecting subsequent information: "
+    dmesg &> "$dir/dmesg.kexec.log"
+    sync
+    lspci -tv &> "$dir/lspci-tv.out"
+    sync
+    lspci -vv &> "$dir/lspci-vv.out"
+    sync
+    lspci -vvxxxx &> "$dir/lspci-vvxxxx.out"
+    sync
+    echo OK
+    echo s > /proc/sysrq-trigger
+
+    # Return core pattern to previous
+    if [[ -f /proc/sys/kernel/core_pattern ]] ; then
+        echo "$OLD_CORE_PATTERN" > /proc/sys/kernel/core_pattern
+    fi
+
+    # Capture Dom0 and Xen coredump and gzip compress
+    if [[ "$CRASH_COREDUMP" == "yes" ]] ; then
+        makedumpfile -c -X -d 1 /proc/vmcore $dir/coredump.bin
+        sync
+        echo s > /proc/sysrq-trigger
+    fi
+
+    # If this shell is not interactive, consider sulogin or reboot following analysis
+    if [[ "$-" != "i" ]] ; then
+        if [[ "$CRASH_LOGIN" == "yes" ]] ; then
+            systemctl emergency
+        fi
+
+        if [[ "$CRASH_REBOOT" == "yes" ]] ; then
+	    echo "Rebooting"
+            reboot
+	    echo "Clean shutdown failed, forcing reboot"
+	    umount -ar
+	    sync
+	    echo s > /proc/sysrq-trigger
+	    reboot -f
+        fi
+    fi
+}
+
+if [[ -f /proc/vmcore ]]; then
+    crash_dump
+else
+    echo "No crash kernel"
+fi
diff --git a/mk/kdump.service b/mk/kdump.service
new file mode 100644
index 0000000..bc24bbb
--- /dev/null
+++ b/mk/kdump.service
@@ -0,0 +1,12 @@
+[Unit]
+Description=Set up crash environment
+Conflicts=shutdown.target
+Before=shutdown.target
+
+[Service]
+Type=oneshot
+RemainAfterExit=yes
+ExecStart=/usr/sbin/xs-kdump
+
+[Install]
+WantedBy=multi-user.target
diff --git a/mk/kdump.sysconfig b/mk/kdump.sysconfig
new file mode 100644
index 0000000..8dbdce3
--- /dev/null
+++ b/mk/kdump.sysconfig
@@ -0,0 +1,46 @@
+# Location of the kexec command
+KEXEC=/usr/sbin/kexec
+
+# Location of the xen-crashdump-analyser command
+XCA=/usr/lib64/xen/bin/xen-crashdump-analyser
+
+# Extra command line arguments for xen-crashdump-analyser.
+# XCA will automatically be given the required parameters of
+# --outdir, --xen-symtab and --dom0-symtab
+XCA_CMDLINE_EXTRA="-v --dump-structures"
+
+# The kdump kernel version to load. By default we look for the same
+# version as the current kernel.
+KDUMP_KERNEL_VERSION="$(uname -r | sed s/xen/kdump/)"
+
+# The command line to pass to the kdump kernel. By default the command
+# line is taken from /proc/cmdline.
+KDUMP_KERNEL_CMDLINE="$(cat /proc/cmdline)"
+
+# Extra arguments for the command line. These are appended to the
+# command line from above. Useful for augmenting the default.
+KDUMP_KERNEL_CMDLINE_EXTRA="udev.children-max=1 rd.udev.children-max=1 plymouth.enable=0 rd.plymouth=0 irqpoll nosmp reset_devices no-hlt panic=1 iommu=off nointremap i915.modeset=0 xen_vgt.vgt=0 init=/usr/sbin/kdump"
+
+# Take a compressed coredump of Xen and Dom0
+CRASH_COREDUMP="no"
+
+# Base directory to write crash logs to.  Subdirectories with timestamps will be created.
+CRASH_LOG_DIR="/var/crash"
+
+# Login as root after taking a dump. "yes" or "no".
+CRASH_LOGIN="no"
+
+# Reboot after taking a dump. "yes" or "no".
+CRASH_REBOOT="yes"
+
+# Max number of crash logs to keep.  0 indicates that all logs should
+# be kept, else the most recent N logs will be kept.
+CRASH_MAX_LOGS="4"
+
+# Sacrificial file to ensure the crashdump analyser has space to write logs
+CRASH_SPACE="$CRASH_LOG_DIR/.sacrificial-space-for-logs"
+
+# Size of the sacrificial file, in MB
+CRASH_SPACE_SIZE_MB=64
+
+# Room for extra tweaks provided by the host installer
diff --git a/mk/kexec-tools.spec.in b/mk/kexec-tools.spec.in
new file mode 100644
index 0000000..b06aa15
--- /dev/null
+++ b/mk/kexec-tools.spec.in
@@ -0,0 +1,87 @@
+Name: kexec-tools
+Summary: kexec/kdump userspace tools.
+Version: @KEXEC_TOOLS_VERSION@
+Release: @KEXEC_TOOLS_REVISION@
+License: GPL
+Group: Applications/System
+
+Source0: %{name}-%{version}.tar.bz2
+Source2: xs-kdump
+Source3: kdump.sysconfig
+Source5: kdump
+Source6: kdump.service
+
+BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-buildroot
+BuildRequires: xen-dom0-libs-devel zlib-devel systemd autoconf automake
+Requires(post): systemd
+Requires(preun): systemd
+Requires(postun): systemd
+
+%description
+kexec-tools, built and packaged as part of XenServer
+
+%prep
+%setup -q
+
+%build
+./bootstrap
+%configure --with-xen --without-gamecube --without-booke
+make
+
+%install
+rm -rf $RPM_BUILD_ROOT
+
+make install DESTDIR=$RPM_BUILD_ROOT
+
+# Delete kdump
+rm $RPM_BUILD_ROOT%{_sbindir}/kdump
+rm $RPM_BUILD_ROOT%{_mandir}/man8/kdump.*
+
+# Delete vmcore-dmesg
+rm $RPM_BUILD_ROOT%{_sbindir}/vmcore-dmesg
+rm $RPM_BUILD_ROOT%{_mandir}/man8/vmcore-dmesg.*
+
+# Delete tests
+rm $RPM_BUILD_ROOT%{_libdir}/kexec-tools/kexec_test
+
+mkdir -p -m755 $RPM_BUILD_ROOT%{_sysconfdir}/sysconfig
+mkdir -p -m755 $RPM_BUILD_ROOT%{_localstatedir}/crash
+mkdir -p -m755 $RPM_BUILD_ROOT%{_sbindir}
+mkdir -p -m755 $RPM_BUILD_ROOT%{_unitdir}
+
+install -m 755 %{SOURCE2} $RPM_BUILD_ROOT%{_sbindir}/xs-kdump
+install -m 644 %{SOURCE3} $RPM_BUILD_ROOT%{_sysconfdir}/sysconfig/kdump
+install -m 755 %{SOURCE5} $RPM_BUILD_ROOT%{_sbindir}/kdump
+install -m 644 %{SOURCE6} $RPM_BUILD_ROOT%{_unitdir}/kdump.service
+
+find $RPM_BUILD_ROOT
+
+%clean
+rm -rf $RPM_BUILD_ROOT
+
+%post
+%systemd_post kdump.service
+
+%postun
+%systemd_postun kdump.service
+
+%preun
+%systemd_preun kdump.service
+exit 0
+
+%files
+%defattr(-,root,root,-)
+
+%{_sbindir}/kexec
+%{_sbindir}/kdump
+%{_mandir}/man8/kexec.*
+%{_sbindir}/xs-kdump
+%{_unitdir}/kdump.service
+
+%config %{_sysconfdir}/sysconfig/kdump
+
+%dir %{_localstatedir}/crash
+
+%doc
+
+%changelog
diff --git a/mk/xs-kdump b/mk/xs-kdump
new file mode 100755
index 0000000..41d6f1b
--- /dev/null
+++ b/mk/xs-kdump
@@ -0,0 +1,164 @@
+#! /bin/bash
+
+# chkconfig: 2345 01 99
+# description: configures the crash dump kernel
+
+. /etc/init.d/functions
+
+# Try to load settings from sysconfig
+if [[ -e /etc/sysconfig/kdump ]];
+then
+    . /etc/sysconfig/kdump
+fi
+
+# Defaults, overridden by /etc/sysconfig/kdump
+KEXEC=${KEXEC:-"/usr/sbin/kexec"}
+KDUMP_KERNEL_VERSION=${KDUMP_KERNEL_VERSION:-"$(uname -r | sed s/xen/kdump/)"}
+KDUMP_KERNEL_CMDLINE=${KDUMP_KERNEL_CMDLINE:-"$(cat /proc/cmdline)"}
+KDUMP_KERNEL_CMDLINE_EXTRA=${KDUMP_KERNEL_CMDLINE_EXTRA:-"udev.children-max=1 rd.udev.children-max=1 plymouth.enable=0 rd.plymouth=0 irqpoll nosmp reset_devices no-hlt panic=1 iommu=off nointremap i915.modeset=0 xen_vgt.vgt=0 init=/usr/sbin/kdump"}
+CRASH_COREDUMP=${CRASH_COREDUMP:-"no"}
+CRASH_LOG_DIR=${CRASH_LOG_DIR:-"/var/crash"}
+CRASH_LOGIN=${CRASH_LOGIN:-"no"}
+CRASH_REBOOT=${CRASH_REBOOT:-"yes"}
+CRASH_MAX_LOGS=${CRASH_MAX_LOGS:-"4"}
+CRASH_SPACE=${CRASH_SPACE:-"$CRASH_LOG_DIR/.sacrificial-space-for-logs"}
+CRASH_SPACE_SIZE_MB=${CRASH_SPACE_SIZE_MB:-64}
+
+if [[ -f /proc/vmcore ]]; then
+    echo "Cannot set up kdump because /proc/vmcore exists"
+    exit 1
+else
+    logger -t kdump $"Setting up crash kernel:"
+
+    # Find the current hypervisor version
+    if [[ -d "/sys/hypervisor/version/" ]] ; then
+        xen_major=$(cat /sys/hypervisor/version/major)
+        xen_minor=$(cat /sys/hypervisor/version/minor)
+        xen_extra=$(cat /sys/hypervisor/version/extra)
+        xen_version="${xen_major}.${xen_minor}${xen_extra}"
+    else
+        # Fall back to reading the boot symlink for a version
+        xen_version=$(readlink -f /boot/xen.gz | sed 's!/boot/xen-\(.*\)\.gz!\1!')
+        if [[ -h /boot/xen.gz && -n "$xen_version" ]] ; then
+            logger -t kdump $"Warning: Falling back to symlink version of xen '$xen_version'"
+        else
+            logger -t kdump $"Warning: can't find Xen version"
+        fi
+    fi
+
+    # Check for xen symbol file
+    xen_symfile="/boot/xen-$xen_version.map"
+    [[ -e "$xen_symfile" ]] || \
+        logger -t kdump $"Warning: can't find Xen symbol file '$xen_symfile'"
+
+    # Find the current dom0 kernel version
+    dom0_kernel_version=$(uname -r)
+
+    # Check for the dom0 symbol file
+    dom0_symfile="/boot/System.map-$dom0_kernel_version"
+    [[ -e "$dom0_symfile" ]] || \
+        logger -t kdump $"Warning: can't find Dom0 symbol file '$dom0_symfile'"
+
+    # Convert xen serial console parameters to kdump serial parameters
+    if [[ -n "$KDUMP_KERNEL_CMDLINE" ]] ; then
+        serialcon=''
+        # XXX HACK  xl currently bails if it can't stat /var/run/xenstored.pid, even
+        # though it doesn't use xenstored
+        touch /var/run/xenstored.pid
+        set -- $(xl info | grep xen_commandline)
+
+        shift 2 # skip "xen-commandline" and ":"
+        while [[ -n "$1" ]]; do
+            case $1 in
+                com1=*)
+                    port=ttyS0
+                    com1=${1#com1=};;
+                com2=*)
+                    port=ttyS1
+                    com2=${1#com2=};;
+                console=*)
+                    xsc=$(expr "$1" : '.*\(com[12]\)')
+                    if [[ -n "$xsc" ]]; then
+                        xenparam=$(eval echo \$$xsc)
+                        baud=$(expr "$xenparam" : '\([0-9]*\)')
+                        data=$(expr "$xenparam" : '[^,]*,\([0-9]\)')
+                        par=$(expr "$xenparam" : '[^,]*,[0-9]\(.\)')
+                        details="$port,$baud$par$data"
+                        serialcon="earlyprintk=serial,$details console=$details"
+                    fi
+                    break
+            esac
+            shift
+            ioport=$([[ -n "$port" ]] && cat "/sys/class/tty/$port/device/resources" 2>/dev/null | \
+                sed -n "/^io/ s/io \(0x[0-9a-f]\+\).*/\1/ p")
+        done
+
+        if echo "$KDUMP_KERNEL_CMDLINE" | grep -q 'xencons='; then
+            KDUMP_KERNEL_CMDLINE=$(echo "$KDUMP_KERNEL_CMDLINE" | \
+                sed -e "s/xencons=[^ ]*//; s/console=hvc0/$serialcon/; s/  / /g")
+        fi
+
+        # If we have an IO port and baud rate, enable serial in purgatory
+        [[ -n "$ioport" && -n "$baud" ]] && \
+            KEXEC_SERIAL_OPTIONS="--console-serial --serial=$ioport --serial-baud=$baud"
+    fi
+
+    # Append xen and dom0 version to kdump command line
+    [[ -n "$xen_version" ]] && \
+        KDUMP_KERNEL_CMDLINE="$KDUMP_KERNEL_CMDLINE kdump-xenversion=$xen_version"
+    [[ -n "$dom0_kernel_version" ]] && \
+        KDUMP_KERNEL_CMDLINE="$KDUMP_KERNEL_CMDLINE kdump-linuxversion=$dom0_kernel_version"
+
+    # Append extra arguments
+    KDUMP_KERNEL_CMDLINE="$KDUMP_KERNEL_CMDLINE $KDUMP_KERNEL_CMDLINE_EXTRA"
+    KERNEL="/boot/vmlinuz-${KDUMP_KERNEL_VERSION}"
+    INITRD="/boot/initrd-${KDUMP_KERNEL_VERSION}.img"
+
+    # Check we have a kernel
+    if [[ ! -f "$KERNEL" ]] ; then
+        echo -n $"No kdump kernel image found"; failure; echo
+        logger -t kdump $"Error: Unable to locate kdump kernel '$KERNEL'"
+        exit 1
+    fi
+
+    # Check we have an initrd
+    if [[ ! -f "$INITRD" ]] ; then
+        echo -n $"No kdump initrd found"; failure; echo
+        logger -t kdump $"Error: No kdump initrd '$INITRD' not found"
+        exit 1
+    fi
+
+    # Log some information
+    logger -t kdump $"Crash kernel: $KERNEL"
+    logger -t kdump $"Crash ramdisk: $INITRD"
+    logger -t kdump $"Crash kernel command line: $KDUMP_KERNEL_CMDLINE"
+
+    # Set up sacrificial crash space.
+    if [[ ! -e "$CRASH_SPACE" ]]; then
+        # If file does not exist, create it.  On error, such as a full
+        # filesytem, remove the crash space to give breathing room for
+        # services like ovs to start back up.
+        dd if=/dev/zero of="$CRASH_SPACE" bs=1M count="$CRASH_SPACE_SIZE_MB" &> /dev/null \
+            || { rm -f "$CRASH_SPACE"; touch "$CRASH_SPACE.failed"; }
+    else
+        # If file does exist, verify it is regular
+        if [[ ! -f "$CRASH_SPACE" ]]; then
+            echo -n $"Crash space exists, but is not regular file"; failure; echo
+            exit 1
+        fi
+    fi
+
+    # Actually try to load the crash kernel
+    action $"Loading crash kernel:" \
+        "$KEXEC" -p --elf64-core-headers $KEXEC_SERIAL_OPTIONS \
+        --append="$KDUMP_KERNEL_CMDLINE" --ramdisk="$INITRD" "$KERNEL"
+    if [[ $? -eq 0 ]]; then
+        logger -t kdump $"Loaded crash kernel"
+        exit 0
+    else
+        logger -t kdump $"Error: Failed to load crash kernel"
+        exit 1
+    fi
+fi
+
+exit $?
